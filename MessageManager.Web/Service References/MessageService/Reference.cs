//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18408
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace MessageManager.Web.MessageService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MessageService.MessageService")]
    public interface MessageService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MessageService/SendMessage", ReplyAction="http://tempuri.org/MessageService/SendMessageResponse")]
        MessageManager.Infrastructure.OperationResponse SendMessage(string title, string content, string senderLoginName, string receiverDisplayName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/MessageService/SendMessage", ReplyAction="http://tempuri.org/MessageService/SendMessageResponse")]
        System.IAsyncResult BeginSendMessage(string title, string content, string senderLoginName, string receiverDisplayName, System.AsyncCallback callback, object asyncState);
        
        MessageManager.Infrastructure.OperationResponse EndSendMessage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MessageService/ReplyMessage", ReplyAction="http://tempuri.org/MessageService/ReplyMessageResponse")]
        MessageManager.Infrastructure.OperationResponse ReplyMessage(string messageId, string title, string content, string replierLoginName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/MessageService/ReplyMessage", ReplyAction="http://tempuri.org/MessageService/ReplyMessageResponse")]
        System.IAsyncResult BeginReplyMessage(string messageId, string title, string content, string replierLoginName, System.AsyncCallback callback, object asyncState);
        
        MessageManager.Infrastructure.OperationResponse EndReplyMessage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MessageService/ForwardMessage", ReplyAction="http://tempuri.org/MessageService/ForwardMessageResponse")]
        MessageManager.Infrastructure.OperationResponse ForwardMessage(string messageId, string title, string content, string senderLoginName, string receiverDisplayName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/MessageService/ForwardMessage", ReplyAction="http://tempuri.org/MessageService/ForwardMessageResponse")]
        System.IAsyncResult BeginForwardMessage(string messageId, string title, string content, string senderLoginName, string receiverDisplayName, System.AsyncCallback callback, object asyncState);
        
        MessageManager.Infrastructure.OperationResponse EndForwardMessage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MessageService/GetUnreadMessageList", ReplyAction="http://tempuri.org/MessageService/GetUnreadMessageListResponse")]
        MessageManager.Infrastructure.OperationResponse<System.Collections.Generic.List<MessageManager.Application.DTO.MessageDTO>> GetUnreadMessageList(string readerLoginName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/MessageService/GetUnreadMessageList", ReplyAction="http://tempuri.org/MessageService/GetUnreadMessageListResponse")]
        System.IAsyncResult BeginGetUnreadMessageList(string readerLoginName, System.AsyncCallback callback, object asyncState);
        
        MessageManager.Infrastructure.OperationResponse<System.Collections.Generic.List<MessageManager.Application.DTO.MessageDTO>> EndGetUnreadMessageList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MessageService/GetUnreadMessageCount", ReplyAction="http://tempuri.org/MessageService/GetUnreadMessageCountResponse")]
        MessageManager.Infrastructure.OperationResponse<int> GetUnreadMessageCount(string readerLoginName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/MessageService/GetUnreadMessageCount", ReplyAction="http://tempuri.org/MessageService/GetUnreadMessageCountResponse")]
        System.IAsyncResult BeginGetUnreadMessageCount(string readerLoginName, System.AsyncCallback callback, object asyncState);
        
        MessageManager.Infrastructure.OperationResponse<int> EndGetUnreadMessageCount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MessageService/ReadInbox", ReplyAction="http://tempuri.org/MessageService/ReadInboxResponse")]
        MessageManager.Infrastructure.OperationResponse<System.Collections.Generic.List<MessageManager.Application.DTO.MessageDTO>> ReadInbox(string readerLoginName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/MessageService/ReadInbox", ReplyAction="http://tempuri.org/MessageService/ReadInboxResponse")]
        System.IAsyncResult BeginReadInbox(string readerLoginName, System.AsyncCallback callback, object asyncState);
        
        MessageManager.Infrastructure.OperationResponse<System.Collections.Generic.List<MessageManager.Application.DTO.MessageDTO>> EndReadInbox(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MessageService/ReadOutbox", ReplyAction="http://tempuri.org/MessageService/ReadOutboxResponse")]
        MessageManager.Infrastructure.OperationResponse<System.Collections.Generic.List<MessageManager.Application.DTO.MessageDTO>> ReadOutbox(string readerLoginName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/MessageService/ReadOutbox", ReplyAction="http://tempuri.org/MessageService/ReadOutboxResponse")]
        System.IAsyncResult BeginReadOutbox(string readerLoginName, System.AsyncCallback callback, object asyncState);
        
        MessageManager.Infrastructure.OperationResponse<System.Collections.Generic.List<MessageManager.Application.DTO.MessageDTO>> EndReadOutbox(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MessageService/ReadMessageSender", ReplyAction="http://tempuri.org/MessageService/ReadMessageSenderResponse")]
        MessageManager.Infrastructure.OperationResponse<MessageManager.Application.DTO.MessageDTO> ReadMessageSender(string messageId, string readerLoginName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/MessageService/ReadMessageSender", ReplyAction="http://tempuri.org/MessageService/ReadMessageSenderResponse")]
        System.IAsyncResult BeginReadMessageSender(string messageId, string readerLoginName, System.AsyncCallback callback, object asyncState);
        
        MessageManager.Infrastructure.OperationResponse<MessageManager.Application.DTO.MessageDTO> EndReadMessageSender(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MessageService/ReadMessageRecipient", ReplyAction="http://tempuri.org/MessageService/ReadMessageRecipientResponse")]
        MessageManager.Infrastructure.OperationResponse<MessageManager.Application.DTO.MessageDTO> ReadMessageRecipient(string messageId, string readerLoginName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/MessageService/ReadMessageRecipient", ReplyAction="http://tempuri.org/MessageService/ReadMessageRecipientResponse")]
        System.IAsyncResult BeginReadMessageRecipient(string messageId, string readerLoginName, System.AsyncCallback callback, object asyncState);
        
        MessageManager.Infrastructure.OperationResponse<MessageManager.Application.DTO.MessageDTO> EndReadMessageRecipient(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface MessageServiceChannel : MessageManager.Web.MessageService.MessageService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MessageManager.Infrastructure.OperationResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MessageManager.Infrastructure.OperationResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReplyMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReplyMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MessageManager.Infrastructure.OperationResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MessageManager.Infrastructure.OperationResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ForwardMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ForwardMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MessageManager.Infrastructure.OperationResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MessageManager.Infrastructure.OperationResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUnreadMessageListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUnreadMessageListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MessageManager.Infrastructure.OperationResponse<System.Collections.Generic.List<MessageManager.Application.DTO.MessageDTO>> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MessageManager.Infrastructure.OperationResponse<System.Collections.Generic.List<MessageManager.Application.DTO.MessageDTO>>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUnreadMessageCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUnreadMessageCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MessageManager.Infrastructure.OperationResponse<int> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MessageManager.Infrastructure.OperationResponse<int>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReadInboxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReadInboxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MessageManager.Infrastructure.OperationResponse<System.Collections.Generic.List<MessageManager.Application.DTO.MessageDTO>> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MessageManager.Infrastructure.OperationResponse<System.Collections.Generic.List<MessageManager.Application.DTO.MessageDTO>>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReadOutboxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReadOutboxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MessageManager.Infrastructure.OperationResponse<System.Collections.Generic.List<MessageManager.Application.DTO.MessageDTO>> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MessageManager.Infrastructure.OperationResponse<System.Collections.Generic.List<MessageManager.Application.DTO.MessageDTO>>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReadMessageSenderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReadMessageSenderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MessageManager.Infrastructure.OperationResponse<MessageManager.Application.DTO.MessageDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MessageManager.Infrastructure.OperationResponse<MessageManager.Application.DTO.MessageDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReadMessageRecipientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReadMessageRecipientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MessageManager.Infrastructure.OperationResponse<MessageManager.Application.DTO.MessageDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MessageManager.Infrastructure.OperationResponse<MessageManager.Application.DTO.MessageDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MessageServiceClient : System.ServiceModel.ClientBase<MessageManager.Web.MessageService.MessageService>, MessageManager.Web.MessageService.MessageService {
        
        private BeginOperationDelegate onBeginSendMessageDelegate;
        
        private EndOperationDelegate onEndSendMessageDelegate;
        
        private System.Threading.SendOrPostCallback onSendMessageCompletedDelegate;
        
        private BeginOperationDelegate onBeginReplyMessageDelegate;
        
        private EndOperationDelegate onEndReplyMessageDelegate;
        
        private System.Threading.SendOrPostCallback onReplyMessageCompletedDelegate;
        
        private BeginOperationDelegate onBeginForwardMessageDelegate;
        
        private EndOperationDelegate onEndForwardMessageDelegate;
        
        private System.Threading.SendOrPostCallback onForwardMessageCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUnreadMessageListDelegate;
        
        private EndOperationDelegate onEndGetUnreadMessageListDelegate;
        
        private System.Threading.SendOrPostCallback onGetUnreadMessageListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUnreadMessageCountDelegate;
        
        private EndOperationDelegate onEndGetUnreadMessageCountDelegate;
        
        private System.Threading.SendOrPostCallback onGetUnreadMessageCountCompletedDelegate;
        
        private BeginOperationDelegate onBeginReadInboxDelegate;
        
        private EndOperationDelegate onEndReadInboxDelegate;
        
        private System.Threading.SendOrPostCallback onReadInboxCompletedDelegate;
        
        private BeginOperationDelegate onBeginReadOutboxDelegate;
        
        private EndOperationDelegate onEndReadOutboxDelegate;
        
        private System.Threading.SendOrPostCallback onReadOutboxCompletedDelegate;
        
        private BeginOperationDelegate onBeginReadMessageSenderDelegate;
        
        private EndOperationDelegate onEndReadMessageSenderDelegate;
        
        private System.Threading.SendOrPostCallback onReadMessageSenderCompletedDelegate;
        
        private BeginOperationDelegate onBeginReadMessageRecipientDelegate;
        
        private EndOperationDelegate onEndReadMessageRecipientDelegate;
        
        private System.Threading.SendOrPostCallback onReadMessageRecipientCompletedDelegate;
        
        public MessageServiceClient() {
        }
        
        public MessageServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MessageServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MessageServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MessageServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<SendMessageCompletedEventArgs> SendMessageCompleted;
        
        public event System.EventHandler<ReplyMessageCompletedEventArgs> ReplyMessageCompleted;
        
        public event System.EventHandler<ForwardMessageCompletedEventArgs> ForwardMessageCompleted;
        
        public event System.EventHandler<GetUnreadMessageListCompletedEventArgs> GetUnreadMessageListCompleted;
        
        public event System.EventHandler<GetUnreadMessageCountCompletedEventArgs> GetUnreadMessageCountCompleted;
        
        public event System.EventHandler<ReadInboxCompletedEventArgs> ReadInboxCompleted;
        
        public event System.EventHandler<ReadOutboxCompletedEventArgs> ReadOutboxCompleted;
        
        public event System.EventHandler<ReadMessageSenderCompletedEventArgs> ReadMessageSenderCompleted;
        
        public event System.EventHandler<ReadMessageRecipientCompletedEventArgs> ReadMessageRecipientCompleted;
        
        public MessageManager.Infrastructure.OperationResponse SendMessage(string title, string content, string senderLoginName, string receiverDisplayName) {
            return base.Channel.SendMessage(title, content, senderLoginName, receiverDisplayName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSendMessage(string title, string content, string senderLoginName, string receiverDisplayName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendMessage(title, content, senderLoginName, receiverDisplayName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MessageManager.Infrastructure.OperationResponse EndSendMessage(System.IAsyncResult result) {
            return base.Channel.EndSendMessage(result);
        }
        
        private System.IAsyncResult OnBeginSendMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string title = ((string)(inValues[0]));
            string content = ((string)(inValues[1]));
            string senderLoginName = ((string)(inValues[2]));
            string receiverDisplayName = ((string)(inValues[3]));
            return this.BeginSendMessage(title, content, senderLoginName, receiverDisplayName, callback, asyncState);
        }
        
        private object[] OnEndSendMessage(System.IAsyncResult result) {
            MessageManager.Infrastructure.OperationResponse retVal = this.EndSendMessage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendMessageCompleted(object state) {
            if ((this.SendMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendMessageCompleted(this, new SendMessageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendMessageAsync(string title, string content, string senderLoginName, string receiverDisplayName) {
            this.SendMessageAsync(title, content, senderLoginName, receiverDisplayName, null);
        }
        
        public void SendMessageAsync(string title, string content, string senderLoginName, string receiverDisplayName, object userState) {
            if ((this.onBeginSendMessageDelegate == null)) {
                this.onBeginSendMessageDelegate = new BeginOperationDelegate(this.OnBeginSendMessage);
            }
            if ((this.onEndSendMessageDelegate == null)) {
                this.onEndSendMessageDelegate = new EndOperationDelegate(this.OnEndSendMessage);
            }
            if ((this.onSendMessageCompletedDelegate == null)) {
                this.onSendMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendMessageCompleted);
            }
            base.InvokeAsync(this.onBeginSendMessageDelegate, new object[] {
                        title,
                        content,
                        senderLoginName,
                        receiverDisplayName}, this.onEndSendMessageDelegate, this.onSendMessageCompletedDelegate, userState);
        }
        
        public MessageManager.Infrastructure.OperationResponse ReplyMessage(string messageId, string title, string content, string replierLoginName) {
            return base.Channel.ReplyMessage(messageId, title, content, replierLoginName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginReplyMessage(string messageId, string title, string content, string replierLoginName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReplyMessage(messageId, title, content, replierLoginName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MessageManager.Infrastructure.OperationResponse EndReplyMessage(System.IAsyncResult result) {
            return base.Channel.EndReplyMessage(result);
        }
        
        private System.IAsyncResult OnBeginReplyMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string messageId = ((string)(inValues[0]));
            string title = ((string)(inValues[1]));
            string content = ((string)(inValues[2]));
            string replierLoginName = ((string)(inValues[3]));
            return this.BeginReplyMessage(messageId, title, content, replierLoginName, callback, asyncState);
        }
        
        private object[] OnEndReplyMessage(System.IAsyncResult result) {
            MessageManager.Infrastructure.OperationResponse retVal = this.EndReplyMessage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnReplyMessageCompleted(object state) {
            if ((this.ReplyMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReplyMessageCompleted(this, new ReplyMessageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReplyMessageAsync(string messageId, string title, string content, string replierLoginName) {
            this.ReplyMessageAsync(messageId, title, content, replierLoginName, null);
        }
        
        public void ReplyMessageAsync(string messageId, string title, string content, string replierLoginName, object userState) {
            if ((this.onBeginReplyMessageDelegate == null)) {
                this.onBeginReplyMessageDelegate = new BeginOperationDelegate(this.OnBeginReplyMessage);
            }
            if ((this.onEndReplyMessageDelegate == null)) {
                this.onEndReplyMessageDelegate = new EndOperationDelegate(this.OnEndReplyMessage);
            }
            if ((this.onReplyMessageCompletedDelegate == null)) {
                this.onReplyMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReplyMessageCompleted);
            }
            base.InvokeAsync(this.onBeginReplyMessageDelegate, new object[] {
                        messageId,
                        title,
                        content,
                        replierLoginName}, this.onEndReplyMessageDelegate, this.onReplyMessageCompletedDelegate, userState);
        }
        
        public MessageManager.Infrastructure.OperationResponse ForwardMessage(string messageId, string title, string content, string senderLoginName, string receiverDisplayName) {
            return base.Channel.ForwardMessage(messageId, title, content, senderLoginName, receiverDisplayName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginForwardMessage(string messageId, string title, string content, string senderLoginName, string receiverDisplayName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginForwardMessage(messageId, title, content, senderLoginName, receiverDisplayName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MessageManager.Infrastructure.OperationResponse EndForwardMessage(System.IAsyncResult result) {
            return base.Channel.EndForwardMessage(result);
        }
        
        private System.IAsyncResult OnBeginForwardMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string messageId = ((string)(inValues[0]));
            string title = ((string)(inValues[1]));
            string content = ((string)(inValues[2]));
            string senderLoginName = ((string)(inValues[3]));
            string receiverDisplayName = ((string)(inValues[4]));
            return this.BeginForwardMessage(messageId, title, content, senderLoginName, receiverDisplayName, callback, asyncState);
        }
        
        private object[] OnEndForwardMessage(System.IAsyncResult result) {
            MessageManager.Infrastructure.OperationResponse retVal = this.EndForwardMessage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnForwardMessageCompleted(object state) {
            if ((this.ForwardMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ForwardMessageCompleted(this, new ForwardMessageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ForwardMessageAsync(string messageId, string title, string content, string senderLoginName, string receiverDisplayName) {
            this.ForwardMessageAsync(messageId, title, content, senderLoginName, receiverDisplayName, null);
        }
        
        public void ForwardMessageAsync(string messageId, string title, string content, string senderLoginName, string receiverDisplayName, object userState) {
            if ((this.onBeginForwardMessageDelegate == null)) {
                this.onBeginForwardMessageDelegate = new BeginOperationDelegate(this.OnBeginForwardMessage);
            }
            if ((this.onEndForwardMessageDelegate == null)) {
                this.onEndForwardMessageDelegate = new EndOperationDelegate(this.OnEndForwardMessage);
            }
            if ((this.onForwardMessageCompletedDelegate == null)) {
                this.onForwardMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnForwardMessageCompleted);
            }
            base.InvokeAsync(this.onBeginForwardMessageDelegate, new object[] {
                        messageId,
                        title,
                        content,
                        senderLoginName,
                        receiverDisplayName}, this.onEndForwardMessageDelegate, this.onForwardMessageCompletedDelegate, userState);
        }
        
        public MessageManager.Infrastructure.OperationResponse<System.Collections.Generic.List<MessageManager.Application.DTO.MessageDTO>> GetUnreadMessageList(string readerLoginName) {
            return base.Channel.GetUnreadMessageList(readerLoginName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUnreadMessageList(string readerLoginName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUnreadMessageList(readerLoginName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MessageManager.Infrastructure.OperationResponse<System.Collections.Generic.List<MessageManager.Application.DTO.MessageDTO>> EndGetUnreadMessageList(System.IAsyncResult result) {
            return base.Channel.EndGetUnreadMessageList(result);
        }
        
        private System.IAsyncResult OnBeginGetUnreadMessageList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string readerLoginName = ((string)(inValues[0]));
            return this.BeginGetUnreadMessageList(readerLoginName, callback, asyncState);
        }
        
        private object[] OnEndGetUnreadMessageList(System.IAsyncResult result) {
            MessageManager.Infrastructure.OperationResponse<System.Collections.Generic.List<MessageManager.Application.DTO.MessageDTO>> retVal = this.EndGetUnreadMessageList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUnreadMessageListCompleted(object state) {
            if ((this.GetUnreadMessageListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUnreadMessageListCompleted(this, new GetUnreadMessageListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUnreadMessageListAsync(string readerLoginName) {
            this.GetUnreadMessageListAsync(readerLoginName, null);
        }
        
        public void GetUnreadMessageListAsync(string readerLoginName, object userState) {
            if ((this.onBeginGetUnreadMessageListDelegate == null)) {
                this.onBeginGetUnreadMessageListDelegate = new BeginOperationDelegate(this.OnBeginGetUnreadMessageList);
            }
            if ((this.onEndGetUnreadMessageListDelegate == null)) {
                this.onEndGetUnreadMessageListDelegate = new EndOperationDelegate(this.OnEndGetUnreadMessageList);
            }
            if ((this.onGetUnreadMessageListCompletedDelegate == null)) {
                this.onGetUnreadMessageListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUnreadMessageListCompleted);
            }
            base.InvokeAsync(this.onBeginGetUnreadMessageListDelegate, new object[] {
                        readerLoginName}, this.onEndGetUnreadMessageListDelegate, this.onGetUnreadMessageListCompletedDelegate, userState);
        }
        
        public MessageManager.Infrastructure.OperationResponse<int> GetUnreadMessageCount(string readerLoginName) {
            return base.Channel.GetUnreadMessageCount(readerLoginName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUnreadMessageCount(string readerLoginName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUnreadMessageCount(readerLoginName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MessageManager.Infrastructure.OperationResponse<int> EndGetUnreadMessageCount(System.IAsyncResult result) {
            return base.Channel.EndGetUnreadMessageCount(result);
        }
        
        private System.IAsyncResult OnBeginGetUnreadMessageCount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string readerLoginName = ((string)(inValues[0]));
            return this.BeginGetUnreadMessageCount(readerLoginName, callback, asyncState);
        }
        
        private object[] OnEndGetUnreadMessageCount(System.IAsyncResult result) {
            MessageManager.Infrastructure.OperationResponse<int> retVal = this.EndGetUnreadMessageCount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUnreadMessageCountCompleted(object state) {
            if ((this.GetUnreadMessageCountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUnreadMessageCountCompleted(this, new GetUnreadMessageCountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUnreadMessageCountAsync(string readerLoginName) {
            this.GetUnreadMessageCountAsync(readerLoginName, null);
        }
        
        public void GetUnreadMessageCountAsync(string readerLoginName, object userState) {
            if ((this.onBeginGetUnreadMessageCountDelegate == null)) {
                this.onBeginGetUnreadMessageCountDelegate = new BeginOperationDelegate(this.OnBeginGetUnreadMessageCount);
            }
            if ((this.onEndGetUnreadMessageCountDelegate == null)) {
                this.onEndGetUnreadMessageCountDelegate = new EndOperationDelegate(this.OnEndGetUnreadMessageCount);
            }
            if ((this.onGetUnreadMessageCountCompletedDelegate == null)) {
                this.onGetUnreadMessageCountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUnreadMessageCountCompleted);
            }
            base.InvokeAsync(this.onBeginGetUnreadMessageCountDelegate, new object[] {
                        readerLoginName}, this.onEndGetUnreadMessageCountDelegate, this.onGetUnreadMessageCountCompletedDelegate, userState);
        }
        
        public MessageManager.Infrastructure.OperationResponse<System.Collections.Generic.List<MessageManager.Application.DTO.MessageDTO>> ReadInbox(string readerLoginName) {
            return base.Channel.ReadInbox(readerLoginName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginReadInbox(string readerLoginName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReadInbox(readerLoginName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MessageManager.Infrastructure.OperationResponse<System.Collections.Generic.List<MessageManager.Application.DTO.MessageDTO>> EndReadInbox(System.IAsyncResult result) {
            return base.Channel.EndReadInbox(result);
        }
        
        private System.IAsyncResult OnBeginReadInbox(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string readerLoginName = ((string)(inValues[0]));
            return this.BeginReadInbox(readerLoginName, callback, asyncState);
        }
        
        private object[] OnEndReadInbox(System.IAsyncResult result) {
            MessageManager.Infrastructure.OperationResponse<System.Collections.Generic.List<MessageManager.Application.DTO.MessageDTO>> retVal = this.EndReadInbox(result);
            return new object[] {
                    retVal};
        }
        
        private void OnReadInboxCompleted(object state) {
            if ((this.ReadInboxCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReadInboxCompleted(this, new ReadInboxCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReadInboxAsync(string readerLoginName) {
            this.ReadInboxAsync(readerLoginName, null);
        }
        
        public void ReadInboxAsync(string readerLoginName, object userState) {
            if ((this.onBeginReadInboxDelegate == null)) {
                this.onBeginReadInboxDelegate = new BeginOperationDelegate(this.OnBeginReadInbox);
            }
            if ((this.onEndReadInboxDelegate == null)) {
                this.onEndReadInboxDelegate = new EndOperationDelegate(this.OnEndReadInbox);
            }
            if ((this.onReadInboxCompletedDelegate == null)) {
                this.onReadInboxCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReadInboxCompleted);
            }
            base.InvokeAsync(this.onBeginReadInboxDelegate, new object[] {
                        readerLoginName}, this.onEndReadInboxDelegate, this.onReadInboxCompletedDelegate, userState);
        }
        
        public MessageManager.Infrastructure.OperationResponse<System.Collections.Generic.List<MessageManager.Application.DTO.MessageDTO>> ReadOutbox(string readerLoginName) {
            return base.Channel.ReadOutbox(readerLoginName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginReadOutbox(string readerLoginName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReadOutbox(readerLoginName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MessageManager.Infrastructure.OperationResponse<System.Collections.Generic.List<MessageManager.Application.DTO.MessageDTO>> EndReadOutbox(System.IAsyncResult result) {
            return base.Channel.EndReadOutbox(result);
        }
        
        private System.IAsyncResult OnBeginReadOutbox(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string readerLoginName = ((string)(inValues[0]));
            return this.BeginReadOutbox(readerLoginName, callback, asyncState);
        }
        
        private object[] OnEndReadOutbox(System.IAsyncResult result) {
            MessageManager.Infrastructure.OperationResponse<System.Collections.Generic.List<MessageManager.Application.DTO.MessageDTO>> retVal = this.EndReadOutbox(result);
            return new object[] {
                    retVal};
        }
        
        private void OnReadOutboxCompleted(object state) {
            if ((this.ReadOutboxCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReadOutboxCompleted(this, new ReadOutboxCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReadOutboxAsync(string readerLoginName) {
            this.ReadOutboxAsync(readerLoginName, null);
        }
        
        public void ReadOutboxAsync(string readerLoginName, object userState) {
            if ((this.onBeginReadOutboxDelegate == null)) {
                this.onBeginReadOutboxDelegate = new BeginOperationDelegate(this.OnBeginReadOutbox);
            }
            if ((this.onEndReadOutboxDelegate == null)) {
                this.onEndReadOutboxDelegate = new EndOperationDelegate(this.OnEndReadOutbox);
            }
            if ((this.onReadOutboxCompletedDelegate == null)) {
                this.onReadOutboxCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReadOutboxCompleted);
            }
            base.InvokeAsync(this.onBeginReadOutboxDelegate, new object[] {
                        readerLoginName}, this.onEndReadOutboxDelegate, this.onReadOutboxCompletedDelegate, userState);
        }
        
        public MessageManager.Infrastructure.OperationResponse<MessageManager.Application.DTO.MessageDTO> ReadMessageSender(string messageId, string readerLoginName) {
            return base.Channel.ReadMessageSender(messageId, readerLoginName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginReadMessageSender(string messageId, string readerLoginName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReadMessageSender(messageId, readerLoginName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MessageManager.Infrastructure.OperationResponse<MessageManager.Application.DTO.MessageDTO> EndReadMessageSender(System.IAsyncResult result) {
            return base.Channel.EndReadMessageSender(result);
        }
        
        private System.IAsyncResult OnBeginReadMessageSender(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string messageId = ((string)(inValues[0]));
            string readerLoginName = ((string)(inValues[1]));
            return this.BeginReadMessageSender(messageId, readerLoginName, callback, asyncState);
        }
        
        private object[] OnEndReadMessageSender(System.IAsyncResult result) {
            MessageManager.Infrastructure.OperationResponse<MessageManager.Application.DTO.MessageDTO> retVal = this.EndReadMessageSender(result);
            return new object[] {
                    retVal};
        }
        
        private void OnReadMessageSenderCompleted(object state) {
            if ((this.ReadMessageSenderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReadMessageSenderCompleted(this, new ReadMessageSenderCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReadMessageSenderAsync(string messageId, string readerLoginName) {
            this.ReadMessageSenderAsync(messageId, readerLoginName, null);
        }
        
        public void ReadMessageSenderAsync(string messageId, string readerLoginName, object userState) {
            if ((this.onBeginReadMessageSenderDelegate == null)) {
                this.onBeginReadMessageSenderDelegate = new BeginOperationDelegate(this.OnBeginReadMessageSender);
            }
            if ((this.onEndReadMessageSenderDelegate == null)) {
                this.onEndReadMessageSenderDelegate = new EndOperationDelegate(this.OnEndReadMessageSender);
            }
            if ((this.onReadMessageSenderCompletedDelegate == null)) {
                this.onReadMessageSenderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReadMessageSenderCompleted);
            }
            base.InvokeAsync(this.onBeginReadMessageSenderDelegate, new object[] {
                        messageId,
                        readerLoginName}, this.onEndReadMessageSenderDelegate, this.onReadMessageSenderCompletedDelegate, userState);
        }
        
        public MessageManager.Infrastructure.OperationResponse<MessageManager.Application.DTO.MessageDTO> ReadMessageRecipient(string messageId, string readerLoginName) {
            return base.Channel.ReadMessageRecipient(messageId, readerLoginName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginReadMessageRecipient(string messageId, string readerLoginName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReadMessageRecipient(messageId, readerLoginName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MessageManager.Infrastructure.OperationResponse<MessageManager.Application.DTO.MessageDTO> EndReadMessageRecipient(System.IAsyncResult result) {
            return base.Channel.EndReadMessageRecipient(result);
        }
        
        private System.IAsyncResult OnBeginReadMessageRecipient(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string messageId = ((string)(inValues[0]));
            string readerLoginName = ((string)(inValues[1]));
            return this.BeginReadMessageRecipient(messageId, readerLoginName, callback, asyncState);
        }
        
        private object[] OnEndReadMessageRecipient(System.IAsyncResult result) {
            MessageManager.Infrastructure.OperationResponse<MessageManager.Application.DTO.MessageDTO> retVal = this.EndReadMessageRecipient(result);
            return new object[] {
                    retVal};
        }
        
        private void OnReadMessageRecipientCompleted(object state) {
            if ((this.ReadMessageRecipientCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReadMessageRecipientCompleted(this, new ReadMessageRecipientCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReadMessageRecipientAsync(string messageId, string readerLoginName) {
            this.ReadMessageRecipientAsync(messageId, readerLoginName, null);
        }
        
        public void ReadMessageRecipientAsync(string messageId, string readerLoginName, object userState) {
            if ((this.onBeginReadMessageRecipientDelegate == null)) {
                this.onBeginReadMessageRecipientDelegate = new BeginOperationDelegate(this.OnBeginReadMessageRecipient);
            }
            if ((this.onEndReadMessageRecipientDelegate == null)) {
                this.onEndReadMessageRecipientDelegate = new EndOperationDelegate(this.OnEndReadMessageRecipient);
            }
            if ((this.onReadMessageRecipientCompletedDelegate == null)) {
                this.onReadMessageRecipientCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReadMessageRecipientCompleted);
            }
            base.InvokeAsync(this.onBeginReadMessageRecipientDelegate, new object[] {
                        messageId,
                        readerLoginName}, this.onEndReadMessageRecipientDelegate, this.onReadMessageRecipientCompletedDelegate, userState);
        }
    }
}
